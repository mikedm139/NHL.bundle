from gamecenter import GCLogin as Login

RE_GAME = Regex('\?id=(?P<season>[0-9]{4})(?P<gtype>[0-9]{2})(?P<game_id>[0-9]{4})')
RE_GID	= Regex('\?id=([0-9]{10})')
RE_LIVE_M3U8 	= Regex('(http:\/\/.+?\.neulion\.com\/nlds\/nhl\/.+?\/as\/live\/.+?_hd_ced\.m3u8)')

GAME_XML = 'http://gamecenter.nhl.com/nhlgc/servlets/game'
TODAY_GAMES     = 'http://live.nhle.com/GameData/GCScoreboard/%s.jsonp'
LIVE_GAMES	= 'http://cedrss.neulion.com/nhlgc/archives/?live=true&user=%s&pass=%s' # username, password

RE_PART_1 = Regex('(nlds_vod/nhl(fr)?/vod/.+)\.mp4')
RE_PART_2 = Regex('(./nhlmobile/vod/nhl/.+)\.mp4')

AudioStreamObject.language_code = Locale.Language.English
####################################################################################################
def NormalizeURL(url):
	return url

####################################################################################################
def MetadataObjectForURL(url):
	game = GetXML(url).xpath('//game')[0]
	date = Datetime.ParseDate(game.xpath("./date")[0].text).date()
	homeTeam = game.xpath("./homeTeam")[0].text
	homeGoals = game.xpath("./homeGoals")[0].text
        awayTeam = game.xpath("./awayTeam")[0].text
	awayGoals = game.xpath("./awayGoals")[0].text
	result = game.xpath("./result")[0].text
	try:
		startTime = Datetime.ParseDate(game.xpath('./gameTimeGMT')[0].text)
		endTime = Datetime.ParseDate(game.xpath('./gameEndTimeGMT')[0].text)
		duration = (endTime-startTime).seconds*1000
	except:
		duration = None
		
	
        title = "%s at %s - %s" % (awayTeam, homeTeam, date)
	if Prefs['score_summary']:
	    summary = "%s - %s %s" % (awayGoals, homeGoals, result)
	else:
	    summary = ''
	if '#HOME' in url:
		summary += "\n" + L("Home Feed")
	elif '#AWAY' in url:
		summary += "\n" + L("Away  Feed")
	else:
		pass
	
	return VideoClipObject(
		title = title,
		summary=summary,
		originally_available_at=date,
		duration = duration,
		thumb = R('nhl.png')
	)

####################################################################################################
def MediaObjectsForURL(url):
	if "#LIVE" in url:
		return [
		MediaObject(
			parts=[PartObject(key=HTTPLiveStreamURL(Callback(PlayLive, url=url)))],
			video_resolution = 720
		)
	]
	else:
		return [
			MediaObject(
				parts=[PartObject(key=HTTPLiveStreamURL(Callback(PlayHLS, url=url)))],
				video_resolution = 720
			)
		]

####################################################################################################
@indirect
def PlayHLS(url):
	game = GetXML(url).xpath('//game')[0]
	playpath = None
	try:
		blocked = game.xpath('.//blocked')[0].text
		if blocked == 'true':
			raise Ex.MediaGeoblocked
	except:
		Log.Debug("Doesn't look like were in a Black-Out region.")
	if "#AWAY" in url:
		Log.Debug('Find the "Away" feed.')
		if '#CONDENSED' in url:
			Log.Debug('Find the "Condensed" feed.')
			try: playpath = game.xpath('.//awayCondensed//publishPoint')[0].text
			except:
				try: playpath = game.xpath('.//condensed//publishPoint')[0].text
				except:
					try: playpath = game.xpath('.//frCondensed//publishPoint')[0].text
					except: Log.Debug('Failed to find the Away-Condensed feed.')
		else:
			try: playpath = game.xpath('.//awayProgram//publishPoint')[0].text
			except:
				try: playpath = game.xpath('.//program//publishPoint')[0].text
				except:
					try: playpath = game.xpath('.//frProgram//publishPoint')[0].text
					except: Log.Debug('Failed to find the Away-Whole feed.')
	elif "#HOME" in url:
		Log.Debug('Find the "Home" feed.')
		if '#CONDENSED' in url:
			Log.Debug('Find the "Condensed" feed.')
			try: playpath = game.xpath('.//homeCondensed//publishPoint')[0].text
			except:
				try: playpath = game.xpath('.//condensed//publishPoint')[0].text
				except:
					try: playpath = game.xpath('.//frCondensed//publishPoint')[0].text
					except: Log.Debug('Failed to find the Home-Condensed feed.')
		else:
			try: playpath = game.xpath('.//homeProgram//publishPoint')[0].text
			except:
				try: playpath = game.xpath('.//program//publishPoint')[0].text
				except:
					try: playpath = game.xpath('.//frProgram//publishPoint')[0].text
					except: Log.Debug('Failed to find the Home-Whole feed.')
	if not playpath:
		# something is preventing us from grabbing the proper feed
		Log.Debug('Find the first available feed.')
		try:	playpath = game.xpath('.//publishPoint')[0].text
		except:	Log.Debug('No feed found. Probably blacked out.')
		if playpath:
			Log.Debug('Found a feed. Using it.')
			# try to grab the appropriate feed
			if "#AWAY" in url:	playpath = playpath.replace('_h_','_a_')
			elif "#HOME" in url:	playpath = playpath.replace('_a_','_h_')
			else: 			pass
		
			if '#CONDENSED' in url:	playpath = playpath.replace('_whole_','_condensed_')
			else:			playpath = playpath.replace('_condensed_','_whole_')
		else:
			# try to build the url on our own (2013-2014 season anyway)
			Log.Debug('Try to build our own feed url.')
			game_date = Datetime.ParseDate(game.xpath('.//date')[0].text).date()
			year = game_date.year
			month = game_date.month
			day = game_date.day
			if len(str(day)) < 2:
				day = '0%s' % day
			gid = (game.xpath('.//gid')[0].text).lstrip('0')
			gtype = (game.xpath('.//type')[0].text).lstrip('0')
			awayTeam = (game.xpath('.//awayTeam')[0].text).lower()
			homeTeam = (game.xpath('.//homeTeam')[0].text).lower()
			if "#AWAY" in url:
				home = 'a'
			else:
				home = 'h'
			if "#CONDENSED" in url:
				whole = 'condensed'
			else:
				whole = 'whole'
			playpath = "adaptive://nlds150.neulion.com/nlds_vod/nhl/vod/%s/%s/%s/%s/%s_%s_%s_%s_1314_%s_%s_1_pc.mp4" % (year, month, day, gid, gtype, gid, awayTeam, homeTeam, home, whole)
	
	try:
		playpath_part1 = RE_PART_1.search(playpath).group(1)
		m3u8_url = "http://nlds150.neulion.com/%s_ced.mp4.m3u8" % (playpath_part1.rstrip('_pc'))
	except:
		playpath_part1 = RE_PART_2.search(playpath).group(1)
		m3u8_url = "http://nhl.cdn.neulion.net/%s/v1/playlist.m3u8" % (playpath_part1.rstrip('_pc'))
		m3u8_url = m3u8_url.replace('/pc/', '/ced/')
	return IndirectResponse(VideoClipObject, key=m3u8_url)

####################################################################################################
@indirect
def PlayLive(url):
	today = Datetime.Now().date()
	content = HTTP.Request(TODAY_GAMES % today).content
	# we need to clean the string before parsing it as json
	json_string = content.split('(',1)[1].split(')',1)[0]
	games_json = JSON.ObjectFromString(json_string)
	game_id = RE_GID.search(url).group(1)
	live_games = RE_LIVE_M3U8.findall(HTTP.Request(LIVE_GAMES % (Prefs['gc_username'], Prefs['gc_password'])).content)
	for game in games_json['games']:
		if str(game_id) == str(game['id']):
			Log.Debug("Found our game")
			if "#AWAY" in url:
				Log.Debug('Find the "Away" feed.')
				team_name = (game['atcommon']).lower()
				
			elif "#HOME" in url:
				Log.Debug('Find the "Home" feed.')
				team_name = (game['htcommon']).lower()
			else:
				Log.Debug('Find the first available feed.')
				Log.Debug('Hopefully the "Home" feed will work.')
				team_name = (game['htcommon']).lower()
	Log.Debug("Looking for %s feed" % team_name)
	for url in live_games:
		if team_name in url or team_name.replace(" ", "") in url:
			m3u8_url = url
		else:
			continue
	
	return IndirectResponse(VideoClipObject, key=m3u8_url)

####################################################################################################
def GetValues(url):
	url_values = RE_GAME.search(url).groupdict()
	values = {'season' : url_values['season'], 'type' : int(url_values['gtype']), 'gid' : url_values['game_id'], 'isFlex' : 'true'}
	return values
####################################################################################################
def GetXML(url):
	values = GetValues(url)
	xml_data = None
	cookies = Login(Prefs['gc_username'], Prefs['gc_password'])
	#Header for XML Request
        headers = {
		'Host' : 'gamecenter.nhl.com',
		'User-Agent' : 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)',
		'Accept' : '*/*',
		'Referer' : 'http://gamecenter.nhl.com/nhlgc/console.jsp',
		'Accept-Language' : 'de-de',
		'Accept-Encoding' : 'gzip, deflate',
		'Cookie' : cookies,
		'Connection' : 'keep-alive',
		'Content-Type' : 'application/x-www-form-urlencoded'
		}
        request = HTTP.Request(GAME_XML, headers=headers, values=values)
        xml_data = XML.ElementFromString(request.content.strip())
        return xml_data

####################################################################################################
def TestURLs():

	test_urls = []
	return test_urls

   